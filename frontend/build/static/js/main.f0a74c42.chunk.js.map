{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","Pages/AIBotpage.js","Pages/video_call/homepage_video.js","Pages/video_call/roompage_video.js","Pages/voice_call/homepage_voice.js","Pages/voice_call/roompage_voice.js","App.js","reportWebVitals.js","theme.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","children","useState","selectedChat","setSelectedChat","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","submitHandler","a","title","status","duration","isClosable","position","config","headers","axios","post","data","setItem","stringify","description","response","message","spacing","id","isRequired","type","placeholder","onChange","e","target","color","_placeholder","opacity","size","width","h","onClick","colorScheme","style","marginTop","isLoading","variant","Signup","handleClick","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","console","log","p","accept","pics","undefined","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","socket","selectedChatCompare","maxW","centerContent","d","justifyContent","bg","w","m","borderRadius","borderWidth","fontSize","fontFamily","isFitted","mb","_selected","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","ProfileModal","useDisclosure","isOpen","onOpen","onClose","base","icon","View","isCentered","flexDir","alignItems","boxSize","src","alt","md","ScrollableChat","map","display","label","placement","hasArrow","mt","mr","cursor","backgroundColor","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","px","py","Close","pl","UserListItem","_hover","background","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleSearch","query","Authorization","token","get","handleRename","put","chatId","chatName","handleAddUser","user1","find","u","groupAdmin","handleRemove","flexWrap","pb","ml","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","sendMessage","event","key","io","on","newMessageRecieved","chat","includes","ArrowBack","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","Chatbox","ChatLoading","height","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","Add","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","count","effect","Effect","SCALE","Bell","notif","n","as","Button","ChevronDown","removeItem","borderBottomWidth","Chatpage","flexDirection","marginRight","AIpage","setMessage","isTyping","preventDefault","window","scrollTo","msgs","role","output","error","index","action","onSubmit","focusBorderColor","Homepage_video","setValue","handleJoinRoom","useCallback","require","Roompage_video","roomId","useParams","myMeeting","element","appID","parseInt","process","kitToken","ZegoUIKitPrebuilt","generateKitTokenForTest","now","create","joinRoom","container","sharedLinks","scenario","mode","OneONoneCall","showScreenSharingButton","ref","Roompage_voice","document","querySelector","turnOnCameraWhenJoining","showMyCameraToggleButton","App","path","component","exact","Homepage_voice","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","theme","extendTheme","initialColorMode","useSystemColorMode","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f0a74c42.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState();\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n\r\n    if (!userInfo) history.push(\"/\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst Login = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const history = useHistory();\r\n  const { setUser } = ChatState();\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!email || !password) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"/api/user/login\",\r\n        { email, password },\r\n        config\r\n      );\r\n\r\n      toast({\r\n        title: \"Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setUser(data);\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"10px\">\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          value={email}\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          color='#4b0082' \r\n          _placeholder={{ opacity: 1, color: 'inherit' }}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            value={password}\r\n            placeholder=\"Enter password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type={show ? \"text\" : \"password\"}\r\n            color='#4b0082' \r\n            _placeholder={{ opacity: 1, color: 'inherit' }}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick} colorScheme='red'>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n      >\r\n        Login\r\n      </Button>\r\n      <Button\r\n        variant=\"solid\"\r\n        colorScheme=\"purple\"\r\n        width=\"100%\"\r\n        onClick={() => {\r\n          setEmail(\"guest@example.com\");\r\n          setPassword(\"123456\");\r\n        }}\r\n      >\r\n        Get Guest User Credentials\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst Signup = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n\r\n  const [name, setName] = useState();\r\n  const [email, setEmail] = useState();\r\n  const [confirmpassword, setConfirmpassword] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [pic, setPic] = useState();\r\n  const [picLoading, setPicLoading] = useState(false);\r\n\r\n  const submitHandler = async () => {\r\n    setPicLoading(true);\r\n    if (!name || !email || !password || !confirmpassword) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n    if (password !== confirmpassword) {\r\n      toast({\r\n        title: \"Passwords Do Not Match\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(name, email, password, pic);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        \"/api/user\",\r\n        {\r\n          name,\r\n          email,\r\n          password,\r\n          pic,\r\n        },\r\n        config\r\n      );\r\n      console.log(data);\r\n      toast({\r\n        title: \"Registration Successful, Please Refresh !\",\r\n        status: \"success\",\r\n        duration: 1000000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setPicLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n    }\r\n  };\r\n\r\n  const postDetails = (pics) => {\r\n    setPicLoading(true);\r\n    if (pics === undefined) {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(pics);\r\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\r\n      const data = new FormData();\r\n      data.append(\"file\", pics);\r\n      data.append(\"upload_preset\", \"chat-app\");\r\n      data.append(\"cloud_name\", \"dkyeeou9d\");\r\n      fetch(\"https://api.cloudinary.com/v1_1/dkyeeou9d/image/upload\", {\r\n        method: \"post\",\r\n        body: data,\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          setPic(data.url.toString());\r\n          console.log(data.url.toString());\r\n          setPicLoading(false);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          setPicLoading(false);\r\n        });\r\n    } else {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"5px\">\r\n      <FormControl id=\"first-name\" isRequired>\r\n        <FormLabel>Name</FormLabel>\r\n        <Input\r\n          placeholder=\"Enter Your Name\"\r\n          onChange={(e) => setName(e.target.value)}\r\n          color='#4b0082' \r\n          _placeholder={{ opacity: 1, color: 'inherit' }}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          color='#4b0082' \r\n          _placeholder={{ opacity: 1, color: 'inherit' }}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter Password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            color='#4b0082' \r\n            _placeholder={{ opacity: 1, color: 'inherit' }}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick} colorScheme='red'>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Confirm Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Confirm password\"\r\n            onChange={(e) => setConfirmpassword(e.target.value)}\r\n            color='#4b0082' \r\n            _placeholder={{ opacity: 1, color: 'inherit' }}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick} colorScheme='red'>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl colorScheme='red' id=\"pic\">\r\n        <FormLabel>Upload your Picture</FormLabel>\r\n        <Input\r\n          colorScheme='red'\r\n          type=\"file\"\r\n          p={1.5}\r\n          accept=\"image/*\"\r\n          onChange={(e) => postDetails(e.target.files[0])}\r\n          color='#4b0082' \r\n          _placeholder={{ opacity: 1, color: 'inherit' }}\r\n        />\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={picLoading}\r\n      >\r\n        Sign Up\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import {\r\n  Box,\r\n  Container,\r\n  Tab,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport Login from \"../components/Authentication/Login\";\r\nimport Signup from \"../components/Authentication/Signup\";\r\n\r\nfunction Homepage() {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n    if (user) history.push(\"/chats\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <Container maxW=\"xl\" centerContent>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        p={3}\r\n        bg=\"#B43757\"\r\n        w=\"100%\"\r\n        m=\"40px 0 15px 0\"\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"1px\"\r\n      >\r\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\r\n          Helpful Harbor\r\n        </Text>\r\n      </Box>\r\n      <Box bg=\"#E4A0F7\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\r\n        <Tabs isFitted variant=\"soft-rounded\">\r\n          <TabList mb=\"1em\">\r\n            <Tab  _selected={{ color: 'white', bg: '#DE73FF' }}>Login</Tab>\r\n            <Tab  _selected={{ color: 'white', bg: '#DE73FF' }}>Sign Up</Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Login />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Signup />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../animations/typing.json\";\r\n\r\nimport io from \"socket.io-client\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://Helpful-Harbor.herokuapp.com\"; -> After deployment\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n          },\r\n          config\r\n        );\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {messages &&\r\n              (!selectedChat.isGroupChat ? (\r\n                <>\r\n                  {getSender(user, selectedChat.users)}\r\n                  <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {selectedChat.chatName.toUpperCase()}\r\n                  <UpdateGroupChatModal\r\n                    fetchMessages={fetchMessages}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                  />\r\n                </>\r\n              ))}\r\n          </Text>\r\n          <Box\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"#CBC3E3\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n            >\r\n              {istyping ? (\r\n                <div>\r\n                  <Lottie\r\n                    options={defaultOptions}\r\n                    // height={50}\r\n                    width={70}\r\n                    style={{ marginBottom: 15, marginLeft: 0 }}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#D8BFD8\"\r\n                color='black'\r\n                placeholder=\"Type a message here and hit Enter...\"\r\n                _placeholder={{ opacity: 1, color: 'inherit' }}\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        // to get socket.io on same page\r\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","export const isSameSenderMargin = (messages, m, i, userId) => {\r\n\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return \"auto\";\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n\r\nexport const getSender = (loggedUser, users) => {\r\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n};\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  IconButton,\r\n  Text,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n      )}\r\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"410px\">\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Image\r\n              borderRadius=\"full\"\r\n              boxSize=\"150px\"\r\n              src={user.pic}\r\n              alt={user.name}\r\n            />\r\n            <Text\r\n              fontSize={{ base: \"28px\", md: \"30px\" }}\r\n              fontFamily=\"Work sans\"\r\n            >\r\n              Email: {user.email}\r\n            </Text>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                  src={m.sender.pic}\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? \"#CF9FFF\" : \"#7F00FF\"\r\n                }`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n            >\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Badge } from \"@chakra-ui/layout\";\r\n\r\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\r\n  return (\r\n    <Badge\r\n      px={2}\r\n      py={1}\r\n      borderRadius=\"lg\"\r\n      m={1}\r\n      mb={2}\r\n      variant=\"solid\"\r\n      fontSize={12}\r\n      colorScheme=\"purple\"\r\n      cursor=\"pointer\"\r\n      onClick={handleFunction}\r\n    >\r\n      {user.name}\r\n      {admin === user._id && <span> (Admin)</span>}\r\n      <CloseIcon pl={1} />\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default UserBadgeItem;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst UserListItem = ({user, handleFunction }) => {\r\n\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n  IconButton,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [renameloading, setRenameLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { selectedChat, setSelectedChat, user } = ChatState();\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRename = async () => {\r\n    if (!groupChatName) return;\r\n\r\n    try {\r\n      setRenameLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/rename`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName,\r\n        },\r\n        config\r\n      );\r\n\r\n      console.log(data._id);\r\n      // setSelectedChat(\"\");\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleAddUser = async (user1) => {\r\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n      toast({\r\n        title: \"User Already in group!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can add someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupadd`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleRemove = async (user1) => {\r\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can remove someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupremove`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {selectedChat.chatName}\r\n          </ModalHeader>\r\n\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\r\n              {selectedChat.users.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  admin={selectedChat.groupAdmin}\r\n                  handleFunction={() => handleRemove(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            <FormControl d=\"flex\">\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                value={groupChatName}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n              <Button\r\n                variant=\"solid\"\r\n                colorScheme=\"teal\"\r\n                ml={1}\r\n                isLoading={renameloading}\r\n                onClick={handleRename}\r\n              >\r\n                Update\r\n              </Button>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add User to group\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n\r\n            {loading ? (\r\n              <Spinner size=\"lg\" />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => handleAddUser(user)}\r\n                />\r\n              ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\r\n              Leave Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateGroupChatModal;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"68%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","import { Stack } from \"@chakra-ui/layout\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatLoading;\r\n","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst GroupChatModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { user, chats, setChats } = ChatState();\r\n\r\n  const handleGroup = (userToAdd) => {\r\n    if (selectedUsers.includes(userToAdd)) {\r\n      toast({\r\n        title: \"User already added\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSelectedUsers([...selectedUsers, userToAdd]);\r\n  };\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = (delUser) => {\r\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: \"Please fill all the feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        `/api/chat/group`,\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\r\n        },\r\n        config\r\n      );\r\n      setChats([data, ...chats]);\r\n      onClose();\r\n      toast({\r\n        title: \"New Group Chat Created!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failed to Create the Chat!\",\r\n        description: error.response.data,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            Create Group Chat\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleDelete(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            {loading ? (\r\n              // <ChatLoading />\r\n              <div>Loading...</div>\r\n            ) : (\r\n              searchResult\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleGroup(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\r\n              Create Chat\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupChatModal;\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst MyChats = ({ fetchAgain }) => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n      setChats(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n  }, [fetchAgain]);\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"#5D3FD3\"\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        d=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        My Chats\r\n        <GroupChatModal>\r\n          <Button\r\n            d=\"flex\"\r\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n            rightIcon={<AddIcon />}\r\n            bg=\"white\"\r\n          >\r\n            New Group Chat\r\n          </Button>\r\n        </GroupChatModal>\r\n      </Box>\r\n      <Box\r\n        d=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"#F8F8F8\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        {chats ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#7F00FF\" : \"#CBC3E3\"}\r\n                color={selectedChat === chat ? \"white\" : \"black\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <Text>\r\n                  {!chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n                {chat.latestMessage && (\r\n                  <Text fontSize=\"xs\">\r\n                    <b>{chat.latestMessage.sender.name} : </b>\r\n                    {chat.latestMessage.content.length > 50\r\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\r\n                      : chat.latestMessage.content}\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport NotificationBadge from \"react-notification-badge\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nfunction SideDrawer() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const history = useHistory();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    console.log(userId);\r\n\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        p=\"5px 10px 5px 10px\"\r\n        borderWidth=\"5px\"\r\n      >\r\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n          <Button variant=\"ghost\" onClick={onOpen} bg='#CBC3E3'>\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\r\n          Helpful Harbor\r\n        </Text>\r\n        <div>\r\n          <Menu>\r\n            <MenuButton p={1}>\r\n              <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              />\r\n              <BellIcon fontSize=\"2xl\" m={1} />\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu>\r\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\r\n              <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                src={user.pic}\r\n              />\r\n            </MenuButton>\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n                <MenuItem>My Profile</MenuItem>{\" \"}\r\n              </ProfileModal>\r\n              <MenuDivider />\r\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n\r\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n          <DrawerBody>\r\n            <Box d=\"flex\" pb={2}>\r\n              <Input\r\n                bg='#CBC3E3'\r\n                color='black'\r\n                placeholder=\"Search by name or email\"\r\n                _placeholder={{ opacity: 1, color: 'inherit' }}\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch}>Go</Button>\r\n            </Box>\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => accessChat(user._id)}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SideDrawer;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport { Button, ButtonGroup, BeatLoader, Flex } from '@chakra-ui/react';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\n\r\nconst Chatpage = () => {\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  const { user } = ChatState();\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />}\r\n      <Box d=\"flex\" justifyContent=\"space-between\"  bg='#E0B0FF' w=\"100%\" h=\"91.5vh\" p=\"10px\">\r\n        <Flex flexDirection=\"column\">\r\n          <Button style={{ marginBottom: \"10px\", marginRight: \"10px\" }} onClick={() => history.push(\"/AIBot\")}>AI Bot &#129302;</Button>\r\n          <Button style={{ marginBottom: \"10px\", marginRight: \"10px\" }} onClick={() => history.push(\"/video\")}>Video Call &#x1F4BB;</Button>\r\n          <Button style={{ marginBottom: \"10px\", marginRight: \"10px\" }} onClick={() => history.push(\"/voice\")}>Voice Call &#128222;</Button>\r\n        </Flex>\r\n        {user && <MyChats fetchAgain={fetchAgain} style={{ marginRight: \"10px\" }} />}\r\n        {user && (\r\n          <Chatbox\r\n            fetchAgain={fetchAgain}\r\n            setFetchAgain={setFetchAgain}\r\n            style={{ marginLeft: \"10px\" }}\r\n          />\r\n        )}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n","import { useState } from \"react\";\r\nimport { Spacer, Box, Center } from '@chakra-ui/react';\r\nimport { Heading, Input, Button, ButtonGroup, BeatLoader, Flex } from '@chakra-ui/react';\r\n\r\nfunction AIpage() {\r\n  const [message, setMessage] = useState(\"\");\r\n  const [chats, setChats] = useState([]);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n\r\n  const chat = async (e, message) => {\r\n    e.preventDefault();\r\n\r\n    if (!message) return;\r\n    setIsTyping(true);\r\n    window.scrollTo(0, 1e10);\r\n\r\n    let msgs = chats;\r\n    msgs.push({ role: \"user\", content: message });\r\n    setChats(msgs);\r\n\r\n    setMessage(\"\");\r\n\r\n    fetch(\"http://localhost:3000/text\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        chats,\r\n      }),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        msgs.push(data.output);\r\n        setChats(msgs);\r\n        setIsTyping(false);\r\n        window.scrollTo(0, 1e10);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    \r\n    <main>\r\n      <Flex>\r\n        <Box w='580px' h='10' bg='white.500' />\r\n        <Heading size='lg' position=\"center\">\r\n        &#128125; Talk to our AI Bot &#129302;\r\n        </Heading>\r\n        <Box w='550px' h='10' bg='white.500' />\r\n      </Flex>\r\n\r\n      <Flex>\r\n      <Box w='220px' h='10' bg='white.500' />\r\n      <Spacer />\r\n      <Flex w=\"40%\" h=\"90%\" flexDirection=\"column\">\r\n      <section>\r\n        {chats && chats.length\r\n          ? chats.map((chat, index) => (\r\n              <p key={index} style={chat.role === \"user\" ? { marginLeft: \"300px\" } : { marginRight: \"10px\" }}>\r\n                    <br>                    \r\n                    </br>\r\n                    <Box\r\n                    alignItems=\"center\"\r\n                    flexDir=\"column\"\r\n                    p={3}\r\n                    //bg='#FFDAB9'\r\n                    bg= {chat.role === \"user\" ? '#add8e6' : '#f08080 '}\r\n                    color='black'\r\n                    w={{ base: \"100%\", md: \"68%\" }}\r\n                    borderRadius=\"lg\"\r\n                    borderWidth=\"1px\"\r\n                  >\r\n                    <span>\r\n                      <b>{chat.role.toUpperCase()}</b>\r\n                    </span>\r\n                    <span>:</span>\r\n                    <span>{chat.content}</span>\r\n                  </Box>\r\n\r\n              </p>\r\n            ))\r\n          : \"\"}\r\n      </section>\r\n\r\n      <div className={isTyping ? \"\" : \"hide\"}>\r\n        <p>\r\n          <i>{isTyping ? \"Typing\" : \"\"}</i>\r\n        </p>\r\n      </div>\r\n      \r\n      <form action=\"\" onSubmit={(e) => chat(e, message)}>\r\n        <br>\r\n        </br>\r\n      <Input focusBorderColor='lime' color='#4b0082' \r\n                placeholder='Type a message here and hit Enter...' \r\n                _placeholder={{ opacity: 1, color: 'inherit' }}\r\n                name=\"message\"\r\n                value={message}\r\n                onChange={(e) => setMessage(e.target.value)}\r\n      />\r\n      \r\n      </form>\r\n      \r\n      </Flex>\r\n      <Spacer />\r\n      <Box w='180px' h='10' bg='white.500' />\r\n      </Flex>\r\n    </main>\r\n   \r\n  );\r\n}\r\n\r\nexport default AIpage;\r\n","import React, {useState, useCallback} from \"react\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport { Heading, Button, Input, Box, Flex } from '@chakra-ui/react';\r\nimport { useToast } from \"@chakra-ui/toast\";\r\n\r\nconst Homepage_video = () => {\r\n    const toast = useToast();\r\n    const [value, setValue] = useState();\r\n    const history = useHistory();\r\n    const handleJoinRoom = useCallback(() => {\r\n        history.push(`/room/${value}`)\r\n        toast({\r\n            title: \"Room formed\",\r\n            description: \"Successful, Please refresh if not redirected automatically!\",\r\n            status: \"success\",\r\n            duration: 5000,\r\n            isClosable: true,\r\n            position: \"bottom-left\",\r\n        });\r\n    }, [history, value]);\r\n    return(\r\n    <div>\r\n        \r\n        <Flex flexDir=\"column\">\r\n            <Box w='350px' h='190' />\r\n        </Flex>\r\n            <Flex w=\"100%\">\r\n            <Box w='340px' h='10'/>\r\n            <Heading size='lg' position=\"center\">\r\n            &#128125; Create your Room code or Enter if you already have one &#129302;\r\n            </Heading>\r\n            <Box w='500px' h='10' />\r\n        </Flex>\r\n        <Flex w=\"100%\">\r\n            <Box w='470px' h='10'/>\r\n            <Input\r\n                style={{ marginTop: \"50px\" }}\r\n                color='blue'\r\n                placeholder='Enter Room Code'\r\n                _placeholder={{ opacity: 1, color: 'inherit' }}\r\n                value = {value}\r\n                onChange={(e) => setValue(e.target.value)}\r\n                w='400px' h='55px'\r\n            />\r\n            <Button style={{ marginLeft: \"10px\", marginTop: \"50px\" }} colorScheme='teal' w='200px' h='55px' onClick={handleJoinRoom}>\r\n                Submit\r\n            </Button>\r\n            <Box w='650px' h='10' />\r\n        </Flex>\r\n        \r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Homepage_video;\r\n\r\n\r\n","import React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { ZegoUIKitPrebuilt } from '@zegocloud/zego-uikit-prebuilt';\r\nimport { Button, Input, Box, Flex } from '@chakra-ui/react'\r\nconst dotenv = require(\"dotenv\");\r\ndotenv.config();\r\n\r\nconst Roompage_video = () => {\r\n    const {roomId} = useParams();\r\n\r\n    const myMeeting = async (element) => {\r\n        const appID = parseInt(process.env.REACT_APP_APP_ID);\r\n        const serverSecret = process.env.REACT_APP_SERVER_SECRET;\r\n        const kitToken = ZegoUIKitPrebuilt.generateKitTokenForTest(\r\n            appID,\r\n            serverSecret,\r\n            roomId,\r\n            Date.now().toString(),\r\n            \"User\"\r\n        );\r\n        const zc = ZegoUIKitPrebuilt.create(kitToken);\r\n        zc.joinRoom({\r\n            container: element,\r\n            sharedLinks: [\r\n                {\r\n                    name: 'Copy Link',\r\n                    url: `http://localhost:3000/room/${roomId}`,\r\n                }\r\n            ],\r\n            scenario: {\r\n                mode: ZegoUIKitPrebuilt.OneONoneCall,\r\n            },\r\n            showScreenSharingButton: true,\r\n        });\r\n\r\n\r\n    };\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n        <Box w='400px' h='2'></Box>\r\n        <div ref={myMeeting}/>\r\n    </div>\r\n  );\r\n  \r\n};\r\n\r\nexport default Roompage_video;","import React, {useState, useCallback} from \"react\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport { Heading, Button, Input, Box, Flex } from '@chakra-ui/react'\r\nimport { useToast } from \"@chakra-ui/toast\";\r\n\r\nconst Homepage_video = () => {\r\n    const toast = useToast();\r\n    const [value, setValue] = useState();\r\n    const history = useHistory();\r\n    const handleJoinRoom = useCallback(() => {\r\n        history.push(`/room1/${value}`)\r\n        toast({\r\n            title: \"Room formed\",\r\n            description: \"Successful, Please refresh if not redirected automatically!\",\r\n            status: \"success\",\r\n            duration: 5000,\r\n            isClosable: true,\r\n            position: \"bottom-left\",\r\n        });\r\n    }, [history, value]);\r\n    return(\r\n        <div>\r\n        \r\n        <Flex flexDir=\"column\">\r\n            <Box w='350px' h='190' />\r\n        </Flex>\r\n            <Flex w=\"100%\">\r\n            <Box w='340px' h='10'/>\r\n            <Heading size='lg' position=\"center\">\r\n            &#128125; Create your Room code or Enter if you already have one &#129302;\r\n            </Heading>\r\n            <Box w='500px' h='10' />\r\n        </Flex>\r\n        <Flex w=\"100%\">\r\n            <Box w='470px' h='10'/>\r\n            <Input\r\n                style={{ marginTop: \"50px\" }}\r\n                color='blue'\r\n                placeholder='Enter Room Code'\r\n                _placeholder={{ opacity: 1, color: 'inherit' }}\r\n                value = {value}\r\n                onChange={(e) => setValue(e.target.value)}\r\n                w='400px' h='55px'\r\n            />\r\n            <Button style={{ marginLeft: \"10px\", marginTop: \"50px\" }} colorScheme='teal' w='200px' h='55px' onClick={handleJoinRoom}>\r\n                Submit\r\n            </Button>\r\n            <Box w='650px' h='10' />\r\n        </Flex>\r\n        \r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Homepage_video;\r\n","import React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { ZegoUIKitPrebuilt } from '@zegocloud/zego-uikit-prebuilt';\r\nimport { Button, Input, Box, Flex } from '@chakra-ui/react'\r\nconst dotenv = require(\"dotenv\");\r\ndotenv.config();\r\n\r\nconst Roompage_voice = () => {\r\n    const {roomId} = useParams();\r\n\r\n    const myMeeting = async (element) => {\r\n        const appID = parseInt(process.env.REACT_APP_APP_ID);\r\n        const serverSecret = process.env.REACT_APP_SERVER_SECRET;\r\n        const kitToken = ZegoUIKitPrebuilt.generateKitTokenForTest(\r\n            appID,\r\n            serverSecret,\r\n            roomId,\r\n            Date.now().toString(),\r\n            \"User\"\r\n        );\r\n        const zc = ZegoUIKitPrebuilt.create(kitToken);\r\n        zc.joinRoom({\r\n            container: document.querySelector(\"#root\"),\r\n            turnOnCameraWhenJoining: false,\r\n            showMyCameraToggleButton: false,\r\n            sharedLinks: [\r\n                {\r\n                    name: 'Copy Link',\r\n                    url: `http://localhost:3001/room1/${roomId}`,\r\n                }\r\n            ],\r\n            scenario: {\r\n              mode: ZegoUIKitPrebuilt.OneONoneCall,\r\n            } \r\n        });\r\n\r\n\r\n    };\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n        <Box w='400px' h='2'></Box>\r\n        <div ref={myMeeting}/>\r\n    </div>\r\n  );\r\n  \r\n};\r\n\r\nexport default Roompage_voice;","import \"./App.css\";\r\nimport Homepage from \"./Pages/Homepage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Chatpage from \"./Pages/Chatpage\";\r\nimport AIpage from \"./Pages/AIBotpage\";\r\nimport Homepage_video from './Pages/video_call/homepage_video';\r\nimport Roompage_video from './Pages/video_call/roompage_video';\r\nimport Homepage_voice from './Pages/voice_call/homepage_voice';\r\nimport Roompage_voice from './Pages/voice_call/roompage_voice';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route path=\"/\" component={Homepage} exact />\r\n      <Route path=\"/chats\" component={Chatpage} />\r\n      <Route path=\"/AIBot\" component={AIpage} />\r\n      <Route path = \"/video\" component={Homepage_video} />\r\n      <Route path = \"/room/:roomId\" component={Roompage_video}/>\r\n      <Route path = \"/voice\" component={Homepage_voice} />\r\n      <Route path = \"/room1/:roomId\" component={Roompage_voice}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// theme.js\r\n\r\n// 1. import `extendTheme` function\r\nimport { extendTheme } from '@chakra-ui/react'\r\n\r\n// 2. Add your color mode config\r\nconst config = {\r\n  initialColorMode: 'dark',\r\n  useSystemColorMode: false,\r\n}\r\n\r\n// 3. extend the theme\r\nconst theme = extendTheme({ config })\r\n\r\nexport default theme","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport ChatProvider from \"./Context/ChatProvider\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport { ColorModeScript } from '@chakra-ui/react';\r\nimport theme from './theme';\r\n\r\nReactDOM.render(\r\n  <ChakraProvider>\r\n    <BrowserRouter>\r\n      <ChatProvider>\r\n      <ColorModeScript initialColorMode={theme.config.initialColorMode} />\r\n        <App />\r\n      </ChatProvider>\r\n    </BrowserRouter>\r\n  </ChakraProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}